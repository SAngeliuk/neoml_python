/* Copyright Â© 2017-2020 ABBYY Production LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--------------------------------------------------------------------------------------------------------------*/

layout(std430, binding=1) readonly buffer Source { int source[]; };
layout(std430, binding=2) writeonly buffer Result { float result[]; };

int getEnd( in int stroke )
{
	return stroke >> 16;
}

int getStart( in int stroke )
{
	return stroke & 0xFFFF;
}

void main()
{   
	int line = ID_X;
	int num = ID_Y;

	if( num >= P.batchSize || line >= P.sourceHeight ) {
		return;
	}

	int imageIndex = num * P.sourceObjectSize;
	int outputIndex = num * P.sourceObjectSize + line * P.sourceWidth;
	
	int imageHeight = source[imageIndex + 1];
	int imageStart = (P.sourceHeight - imageHeight) / 2;
	int imageStop = imageStart + imageHeight;

	if(line < imageStart || line >= imageStop) {
		// Empty row
		for(int i = 0; i < P.sourceWidth; ++i) {
			result[outputIndex++] = P.nonStroke;
		}
		return;
	}

	// Find the row in the RLE image
	int lineToPass = line - imageStart;
	int rleStrokeIndex = imageIndex + 4;
	while(lineToPass > 0) {
		if(getEnd(source[rleStrokeIndex]) < 0) {
			--lineToPass;
		}
		++rleStrokeIndex;
	}

	// Fill the row start with the empty value
	int startPos = (P.sourceWidth - source[imageIndex + 2]) / 2;
	for(int i = 0; i < startPos; ++i) {
		result[outputIndex++] = P.nonStroke;
	}

	// Draw the strokes
	int position = 0;
	while(getEnd(source[rleStrokeIndex]) >= 0) {
		for(; position < getStart(source[rleStrokeIndex]); ++position) {
			result[outputIndex++] = P.nonStroke;
		}
		for(; position < getEnd(source[rleStrokeIndex]); ++position) {
			result[outputIndex++] = P.stroke;
		}
		++rleStrokeIndex;
	}

	// Fill the row end with the empty value
	int rest = P.sourceWidth - position - startPos;
	for(int i = 0; i < rest; ++i) {
		result[outputIndex++] = P.nonStroke;
	}
}
